물리엔진과 three.js의 관계

물리엔진은 자연에서 일어나는 물리 현상을 수학적으로 연산해서 직접 구현하려면 굉장히 어려울테니까,
이걸 자동으로 해주는 물리엔진 라이브러리를 갖다쓰기
캐논js는 사용하기 제일 쉬움, 기능들이 비슷하기때문에 다른거할때도 도움이 될 것

불투명한 색깔있는 컵은 mesh, 캐논js에서 만든 body의 오브젝트가 있따면
바디는 눈에 보이지 않음, 물리적으로 연산되고 연산이 적용되는 애,
우리가 원하는건 mesh를 공중에 놓고 떨어뜨리는 것, mesh에는 그런 기능이 없고
캐논js의 body를 이용해서 중력을 설정해주면 떨어짐
튕기거나, 넘어지거나 등등을 해줌

얘도 meshㅇ와 마찬가지로 위치, 회전값을 갖고 있는데 얘 위치를 mesh가 따라가게 만들면 됨
copy해서 그대로 따라가게끔
(결합이 된 상태로 같이 떨어지는 것처럼 보이게끔)
three.js에서 만든 mesh와 cannon.js에서 만든 body는 함께 따라가게 됨


----------------------------------------------
물리엔진 월드 생성

vscode에서 열기, 패키지 설치, three.js 설치

cannon.js 공식문서를 가보면 필요한걸 검색해보기

orbitControls 추가

three.js까지 설치를 해줬었는데, cannon.js는 외부라이브러리라서 따로 설치해주기
--> npm i cannon
오래돼서 업데이트가 안되어서 , es버전이 더 최신화되어 있어서
npm i cannon-es를 해주면 됨
three 코어 가져오는 식으로
import * as CANNON from 'cannon-es'로
--> CANNON. 으로 접근 가능

cannon에 월드를 만들어줘야함
new CANNON.World();

캐논 월드에 중력을 세팅해줘야함
--> 물리현상들이 자연스럽게 일어남
지구 중력, 달 중력이 다르듯이 중력가속도를 다르게 세팅해줄 수 있음
지구 중력가속도는 9.8, 지구랑 비슷하게 하려면 10정도
cannonWorld.gravity.set()
three.js에서 set할때 축 별로 세팅해줄 수 있었는데, 위에서 아래로 떨어지는거니까 y만 해주면 됨
--> set(0, -10, 0) : -로 해줘야 밑으로 떨어짐

큐브를 떨어뜨릴건데,
바닥을 추가해주기
--> 바닥도 역시 캐논에서 만들어줘야하지만 mesh가 일하는것
--> plane mesh를 깔아주기

const floorMesh = new ThREE.Mesh(
new THREE.PlaneGeometry(10, 10),
new THREE.MeshStandardMaterial(color : 'slategray'})
)

한번에 만들기, geometry, material를 따로 만들어줬지만 지금은 그냥 한번에 하기
(floor는 다른데서 쓸 일이 없을 거라)

scene.add(floorMesh)를 하면 plane이 세워져있음
--> floorMesh.ratation.x = (90도니까) Math.PI/2;
--> 이렇게 하면 안보임, 앞면이 바닥에 깔려서 뒷면은안보임, --> 앞면이 위로 오도록 앞에 -를 붙이기

이런 meshㄹ르 바닥 위에 놓을때는 mesh 높이의 절반 만큼을 y값을 올려줘야함
box의 높이가 1이니까, box의 y포지션을 0.5로 해줘야 바닥 위로 올라오게됨



--> cannon에서 세팅해주기
cannon에서도 바닥, box도 똑같이 필요함
(다음 시간에)



------------------------------
물리가 적용되는 객체 만들기

three.js에서는 geometry = shape으로 부름, 
floorBody를 만들고, 얘가 물리혀상이 적용돼서 실제로 움직이는 애
new CANNON.Body( { mass :

바닥은 고정되어있어야하기 때문에(얘가 고정되어있지 않으면 같이 끝없이 떨어지기 때문에:)
그래서 0위치에서 -방향으로 낙하한다는 말,
그렇게 안되게 하려면 mass: 0으로 하면 중력의 영향을 안받음 --> 바닥의 역할을 하기 위해

position: new CANNON.Vec3(0, 0, 0) --> 위치 설정
어떤 형태를 쓸건지 shape : floorShape

이 만든 바디를 cannonWorld.addBody(floorBody)로 하면 됨

cannon plane도 마찬가지로 plane mesh처럼 기본적으로 서있는데, 얘도 three.js에서처럼 회전해야함
회전할때 quaternion을 써줘야함
floorBody.quaternion (사원수, 해밀턴 수), .setFromAxisAngle(축각도에서 세팅)();
각도, 축을 인자로 넣어줘야함
축도 vec3로 함
new CANNON.Vec3(x축 기준으로 90도니까 벡터좌표에서는, 0,0,0기준에서는 x방향으로 가면 되니까 -1, 0,0 해주면 됨
0 1 0이면 y축이ㅗㄱ
각도는 radian
Math.PI / 2


box Shpae도 만들기
const boxShape = new CANNON.Box();
three.js에서와는 좀 다름, three.js에서는 가로, 세로, 깊이를 숫자로 정하는 건데
cannon.js는중심을 기준으로 얼만큼 갈건지
--> three.js에ㅓㅅ 1, 1,1이었다면 이것의 반을 해줘야함(반지름 느낌으로)
--> 0.5 0.5 0.5대신vec3(0.5, 0.5, 0.5)로 해주기

boxBody도 만들기 new CANNON.Body({mass: 1
얘도 단위가 없기 때문에 단위는 상대적으로 알아서 생각하기
position : new CANNON.Vect3(0, 3, 0) --> 살짝 띄워주기

cannonWorld에 addBody로 넣어주기

--> MEsh, 물리적으로 컨트롤해줄 body를 만들었음
--> 이후 이 둘을 draw함수에서 연결해주기

cannonworld.step()으로 시간 단계 설정
처음에 고정된 시간 단위, 몇분에 1초 간격으로 갱신해줄건가 --> draw함수는 초당 60프레임, 60분에 1초를 목표를 목표로 하고 있음
step(1/60, delta, 3);
성능보정으로 delta와 같은 시간 차를 이용했었는데, 이 인자를 넣어주면 됨
잠재적으로 차이가 벌어질 수 있어서 이 간격을 메우는 시도를 몇번을 해줄건지 횟수 세팅

--> 주사율에 따라 다른데, 그냥 1/60으로 하게 되면 고정값이되니까, 주사율이 120인 곳에서는 더 부드럽게 구현할 수 있음에도 덜 부드럽게 구현하게 되는 게 될 수 있어서
완전히 얇은 벽은 뚫고 나가는 현상이 있다던지
--> 프레임, 화면주사율이 일치하지 않아서 그럼

--> 그런데 고정된 갑슬 넣어야하기 때문에 그래서 화면 주사율에 따라 유동적으로 대응하면 좋을 것 같아서,
--> 퀄리티를 높이기 위해 delta를 가지고 정해주는 걸로 수정하기

delta는 draw함수 시간 간격인데, delta를 출력해보면 초당 60프레임을 그려주는 애니까 0.16~0.17 왔다갔다 했었는데, 120프레임에서는 0.008, 0.007 이렇게 나옴
--> delta값에 따라서 변수를 맞춰주기

let cannonStepTime = 1/60;
if(delta < 0.01)dlfkaus cannonStepTime = 1/120;
delta값에 따라서 steptime을 바꿔주기
--> 작업을 따로해주기

cannonBody위치를 mesh가 따라가도록 하기
position을 그대로 복사하기
floorMesh.position.copy(floorBody.position) --> 인자를 그대로 복사하는 함수
box도 마찬가지로 해주기
--> 이렇게 하면 박스가 떨어짐

boxMesh.position.y = 0.5로 처음에 코드에서 세팅을 했었지만, 얘는 딱 처음에 한번 실행되는거고
draw함수에ㅓㅅ 계속 실행되는 boxBody.positon을 따라가기 때문에 boxMesh.position은 3으로 해놨고 3에서 중력이 작동하니까 떨어짐

지금은 floor에서 딱 멈추고 있는데 floorBody의 mass를 1로 바꾸면 같이 함께 떨어짐
외부 충격에 가만히 있어야한다면 mass를 모두 0으로 해놔야함

실제 mass가 클수록 무겁기 때문에 외부 충격에 많은 충격을 받음

여기서 손볼게 있는데,
박스가 정육면체인데 넘어질 일이 없음, --> 홀쭉한 박스로 바꾸고 충격받으면 넘어져야하니까

box를 1,1,1이 아니라 0.5 5 0.5로 하기
--> cannonBoxyShpae도 바꿔주기 0.25, 2.5, 0.25로 바꾸고
position도 5에서 떨어뜨리기

--> 떨어졌는데 움직이는데 느낌이 이상함
--> 미끄러지다가 갑자기 바닥이 뚫림
--> cannonBody는 넘어졌는데 mesh가 안넘어져서 그럼
우리가 draw함수에ㅓㅅ boxbody Position을 그대로 카피해ㅓㅅ 이동시키는건데, 회전은 따로 해줘야함
회전도 따로 카피해줘야함

boxMesh.quaternion.copy(boxBody.quaternion)
--> three.js에서는 rotation함수를 써서 회전을 했지만 quaternion으로도 회전이 가능함, cannon.js에서 회전을 quaternion으로 했기 때문
--> 넘어지게 됨

three.

나는 안되길래 왜안되지 하면서 보니까 오타남..^^..Box를 Body로쓰고앉았네


----------------------------------
재질에 따른 마찰력과 반발력

ex02.js

contact material : cannon.js에서 재질을 설정할 수 있음, 재질에 따라서 마찰력과 반발력이 다름
--> 재질 자체가 얼마나 미끄러지느냐 마찰력이 크냐를 조절할 수 있어야함
재질과 재질이 닿았을 때 어떻게 처리할 것인지 만드는게 contact material

sphere로 해서, mesh에서 box부분을 ctrl+Shift+L 누르면 한번에 여러개 바꾸기, shpereShape로 바꾸기
반지름을 인자로 바꾸기


그림자가 없어서 떠있는 느낌이 나서
그림자 설정
그림자를 만들려면 spereMEsh.castShadow = true;를 해줘야함, 그리고 빛에도 해줘야함
directionalLight.castShadow = true;
로 해주고 그림자를 받는 애는 floorMesh.receiveShadow = true;롷 ㅐ야함
이후 renderer에서도 섀도우가 생기도록 설정
renderer.shadowMap.enabled = true;
renderer.shadowMap.type = THREE.PCFSoftShadowMap;을 하면 그림자가 부드럽게 표현이 됐었음

지금은 약간 튕김, 이게 기본값


Material을 만들어야함
const defaultMaterial = new CANNON.Material(이름 'default');
const rubberMaterial = new CAONNON.Material('rubber');
= new CANNON.Material('iron')

rubber는 고무,
material을 세개 만들고 나서
const defaultContactMaterial = new CANNON.ContactMaterial(
defaultMaterial,
defaultMaterial,
{friction : 0.5, restitution : 0.5});
인자에 부딪힐 materail두개를 넣기
부딪힌다는 건 두개의 물체를 부딪힌다는 것,
default Material끼리 부딪혔을때 3번째 인자로 { friction : 0.5 // 마찰, restitution : 0.5 // 반발 }

--> 얘를 cannonWorld.defaultContactMaterial = defaultContactMaterial;
-->이렇게 하면 엄청 많이 튕김

반발력이 커진 것
restitution : 0으로 하면 안튕김, 

다른거 rubber, iron가 충돌했을때 material도 만들어보기
const rubberDefualtContactMaterial = new CANNON.ContactMaterial(
rubberMaterial,
defaultMaterial,
{
friction : 0.5,
restitution: 0.7
}

cannonWorld.addContactMaterial(rubberDefualtContactMaterial) : material을 넣어주기
--> 아직은 적용이 안됨, 그냥 cannonWorld에 넣어주기만 했을 뿐, 얘가 동작하려면 rubberMaterial, defaultMaterial끼리 부딪히게 해야 적용됨
--> cannonBody에서 적용을 해줘야함

floorBody에 material: defaultMaterial 로 해줄 수 있음
shpereBody material : rubberMaterial로 해주면
아까랑 다름
--> 재질 별로 부딪히는게 다르게 한다면 다르게 해주면 됨

iron까지 해주기
iron은 쇠공이라 하나도 안튀겨야함

상황에 맞게 contact 설정을 해줄 수 있음
필요없으면 default만 세팅해서 써주면 됨


------------------------------
힘(Force)

ex03.js
힘이 작용하면 밀려남, 물체의 위치에 영향을 줌

코드가 길어져서 contact는 default만 사용하도록
spherebody도 defaultMaterial로

아무데나 클릭하면 바람이 불도록 하기
canvas.addEventListener('click', () => {
sphereBody.applyForce(new CANNON.Vec3(-100, 0, 0), sphereBody.position);
}

vector에 힘의 방향과 크기를 넣어주기 왼쪽이면 -x쪽임, -100만큼의 힘
이 힘을 어디에 적용할 것인지
sphere에 적용해야하는데 position이 변해야함
공의 위치를 그대로 써주기(얘도 vector니까)

드래그 했을 때는 클릭 안되게 하기
(orbitControls를 사용하고 있어서 카메라 각도를 바꿀때도 클릭이 되어서
raycaster때 했던 그 안에 src/preventDragClick.js를 카피해서 폴더에 붙여넣기
이후 import {PreventDragClick} from './PreventDragClick';
const PreventDragClick = new PreventDragClick(canvas); 
--> canvas가 드래그 됐을 때 클릭방지니까

그리고 클릭했을 때 드래그가 됐으면 위의 applyForce를 안할거니까
click이벤트 코드에
if(preventDragClick.mouseMoved) return;

방향 바꿔보기 50, 300, 0으로 하면 위로 떠올랐다가 중력에 의해서 다시 내려옴(점프하는 느낌)
클릭을 여러번 하면 갑자기 막 빨라짐(힘이 누적돼서)
누적이 안되게 하려면 속도를 0으로 만들어주면됨
sphereBody.velocity.x = 0;
y, z도
angularVelocity x,y,z도 0으로 해줘야함

계속 가는 공을 멈추려면?
draw함수에서 계속 반복하고 있으니까
draw함수에서 velocity를 조절해주면 됨, 계속 깎아먹도록
위에 velocity들을 0으로 해줬던 코드를 긁어와서
draw함수에 넣고, 0이 아니게 해줌(0이면 멈춘다는 의미니까)
*= 0.98을 곱해주기(1보다 작은 숫자들을)
점점 누적돼서 점점 작아지니까 점점 0에 수렴하게 됨
--> 점점 멈춰짐, 자연스럽게 멈춰짐

너무 약하면 힘을 조절해서 -500으로
힘이 필요한 순간에 해주면 됨
충돌이 아니라 바람이 부는 자연스러운 현상에서는 applyForce를 유용하게  활용 가능


------------------------------
랜덤 위치에 공 생성하기

ex04.js

캐논에서 보유하는 객체가 많으면 많을수록 연산은 늘어나서 성능이 떨어짐,
성능 좋게하기
공을 여러개 만들기(클릭할때마다 랜덤위치에 생성되도록)

공은 없애기
Mesh에서도 sphere메쉬는 모두 다 없애기

click이벤트에서 sphere를 만들어서 랜덤위치 생성,
클래스로 만들어서 모델로 만들어서 import해서 만들기
새 파일 --> MySphere.js
export class MySphere {
	constructor() {
}
}

constructor 안에 three.js의 mesh, cannon.js의 body 모두 생성
파라미터로 위치를 받아서
호출 쪽 코드는
new MySphere({});를 해야
import { MySphere } from './MySphere.js'

메쉬를 만들어서 scene에 추가를 해야하는데, constructor에서는 scene을 접근할 방법이 없으니까 json안에 넣어주기
scene : scene 으로 key와 value이름이 똑같을 때는 scene만 써줘도 된다.

x, y 위치는 x: (Math.random() - 0.5) * 2 // -1~1 random값이 0이나오면 -1, random값이 1이 나오면 1 random값이 0~1 사이인가보다
y: (Math.random() * 5 + 2// 0~5에서 조금 띄워주려먼 + 2, 2~7 사이에 나오게 됨
z: x와 같게
크기도 랜덤하게
scale: Math.random() + 0.2 // 메쉬생성할때 geometry, material은 고정시켜놓고 얘로 계속 생성하도록, geometry를 만들때 반지름을 넣어줘야하는데, geometry가 이미 만들어져서 같은 geomtry로 크기를 조정하려면 scale을 조정하면 된다(반지름이 아니라 변환으로 조정하기)
geometry자체는 반지름은 고정, scale값은 변동되게끔
geometry: sphereGeometry,
material: sphereMaterial


이후 MySphere에서 info부분을 속성으로 등록
this.scene = info.scene;
this.geometry = info.geometry; ... 등등

일단 전부 this를 붙여서 객체의 속성으로 세팅하긴 했는데, 클래스의 생성자 함수 내부에서만 사용할 거라면 그냥 변수로 해도 무방

이후 mesh 생성, MySphere.js에서는 three.js를 import 안해왔는데, 여기서는 필요한 부분만 import해오기
import { Mesh
} from 'three';
this.mesh = new Mesh(this.geometry, this.material);
this.mesh.scale.set(this.scale, this.scale, this.scale);
this.mesh.castShadow = true;
this.scene.add(this.mesh);

position은 cannonBody가 해줄거니까 여기서 안해줘도됨(cannonBody가 움직이면 걔를 따라가게끔 해줘야 하니까)
test용으로 하긴 해주기
this.mesh.position.set(this.x, this.y, this.z);

랜덤 위치에, 랜덤 크기로 만들어짐

setCannonMody() 메소드를 만들고 생성자에서 실행

cannonBody는 cannonWorld에 들어가야해서 info 파라미터에 넣어주기
setCaonnonBody에서 sphereBody에 대응하는 body만들어주기
const shape  = ndw Sphere();
this.scale에 따라서 각 크기가 다 다름,--> new Sphere()할때 인자로 반지름을 어떻게 다 다르게 해줄 것인가?
크기가 다른 이유가 scale이 적용됐기 때문, scale은 원래 크기에서 얼마나 비율을 다르게 했는가인데 얘 지금 크기는 어떻게 알 수 있을까?
--> 원래 크기, SphereGeometry()에는 원래 반지름은 0.5로 설정되어 있음,
원래 반지름에 scale값이 곱해진 것
--> 원래 반지름 크기에 scale을 곱하면 저 크기가 나옴
this.cannonBody= new Body({mass: 1, positon: new Vec3(this.x, this.y, this.z),
shape

로 만들고 this.cannonWorld.addBody(this.cannonBody);


import { Sphere, Body, Vec3 } from 'cannon-es';

동작하려면 cannonBody의 위치를 mesh가 따라가게 해야함--> draw에서
클릭할때마다 생성되는데, 생성될때마다 배열에 담아놓고 draw함수에서ㅡㄴ 배열의 원소를 받아서 position을 카피하도록
const spheres = []; 로 만들어두고
shperes.push(new MySphere()); 이런 식으로 mysphere을 만들때마다 push
이후 draw함수에서 shperes.forEach(item => {
	item.mesh.position.copy(item.cannonBody.position);
	item.mesh.quaternion.copy도 똑같이
});

클릭할때마다 애들이 나와서 떨어짐
코드 스타일 자체를 입혀보기



---------------------------
성능 관리 설정

2가지 체크,
cannonWorld.allowSleep = true;하면 보기엔 똑같은데
충돌을 하다가 결국엔 거의 멈출텐데, 그런 상태가 되면 test를 안함
(충돌 체크 같은걸) 움직이는 와중엔 해야함
멈출때에도 계속 테스트는 하고 있음, 더이상 test가 의미없다면 allowSleep을 하면 됨
주의할 것은, 게임은 멈춰있더라도 계속 체크를 해줘야함, --> allowSlepp을 해두면 나중에 주인공이 와서 뭘 했는데 반응을 안할수도
--> 이 설정을 true로 할 것인지 판단을 먼저 한 뒤에 해줘야 함

2번째는
cannonWorld.broadphase = new CANNON.SAPBroadphase(cannonWorld); // 제일 좋은 거
성능이 좀 더 좋음,
적절히 효율적으로 타협하는 애
퀄리티 저하 없고 퍼포먼스 잘 나오는

broadphase에는 NaiveBroadphase (기본), GridBroadphase9(4개의 구역으로 나눠서 테스트가 필요한 쪽을 테스트 함)가 있음
SAPBroadphaase가 제일 좋음

이거 왜 드래그 했는데 클릭 인식하지 흠
아 ex03.js에서 했던 것처럼 클릭 이벤트에서 dragflag가 true일때 return을 안해줘서 그렇구나



------------------------------------------
ex05.js

충돌일어났을때 소리나게끔

충돌이벤트, 사운드 넣기

이벤트 구역에
캐논 바디에 해줌
하지만 지금 cannon body는 MySphere.js 클래스 안에서 세팅해주고 있어서
mysphere 인스턴스 객체에 충돌 이벤트를 바인딩 해주기
--> const mySphere = new MySphere();
로 해주고

spheres.push(mySphere)을 넣어주기,

mySphere.cannonBody.addEventListener('collide', );
이벤트함수 핸들러는 따로 만들기
충돌은 collider

function collide(e) {
console.log(e);

--> 이렇게 해주면 충돌이 일어날때마다 console에 로그가 찍힘

사운드를 넣어보기
사운드파일이 필요한데, sounds의 boing.mp3를 사용, webpack을 쓸때 외부 리소스를 가져오려면 config파일에서 경로설정을 해줘야함

webpack.config.js파일에서 사운드 폴더를 주석처리해놨던걸 풀기
--> 웹팩에서도 접근 가능

npm start 다시해주기

sound = new Audio('/sounds/boing.mp3);
sound.play();

--> 튕길때 사운드가 재생됨

공이 여러개 생기면 나오긴하는데 사운드가 한번에 하나만 재생됨--> 여러개가 동시에 재생되지 않음

--> sound.currentTime = 0;
// 현재 플레이 헤드가 있는 시간
--> 충돌이 될때마다 헤드를 0으로 맞춰주니까 처음부터 재생이 됨
--> 이렇게 하니까 조금만 충돌이 일어나도, 미세한 진동만 있어도 플레이가 됨

--> 충돌할때 속도가 있을텐데, 일정 속도 이상일때만 소리가 나게
느리게 살짝 부딪혔을땐 소리가 안나도록
const velocity = e.contact.getImpactVelocityAlongNormal();을 해주면
속도가 나옴
velocity를 출력해보면, 9 > 2 > 0 으로 줄어듬
--> 3를 기준으로 잡아보기
3보다 클 경우에만 사운드 플레이 되게

favicon.ico가 없다고 뜨는데 무시해도됨


--------------------
오브젝트제거하기

ex06.js

생성된 메쉬들을 활용해서없애기

화면에 공들을 만든다음에
버튼을 누르면 얘네가없어지도록
--> 버튼은 html에 넣어도되는데 html은 다른 파일에서도 공통으로사용하니까 건드리지 말고
js에서 버튼만들고 조립하기

btn.style.cssText = 'position: absolute' 
cssText로
document.body.append(btn);
로 조립

버튼에 click이벤트 바인딩, 익명함수로 넣기
생성된 공들을 삭제하려면 spheres에 push해서 넣어놨으니까 그거 활용

foreach(item => {
scene.remove(item.mesh);

--> item으로 mesh를 접근할수있는 이유는 MySphere 클래스에서 this.mesh = new Meh();로 .mesh로 속성으로 넣어놔서 .mesh로 접근이 가능
여기에 cannonJs로 물리엔진을 적용해놨는데 얘네 관련한것도 모두 없애기, 메모리를 점유를 하고 있어서

cannonWorld.removeBody(item.cannonBody);

원래 collide 이벤트를 바인딩해놓기

이벤트를 등록해놓은것도 다 메모리를 차지하는 일
--> 그래서 얘네도 remove를 해줘야함

item.cannonBody.removeEventListener('collide', collide);로 제거해주면 됨

--> 깨끗하게 삭제
