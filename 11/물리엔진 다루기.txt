물리엔진과 three.js의 관계

물리엔진은 자연에서 일어나는 물리 현상을 수학적으로 연산해서 직접 구현하려면 굉장히 어려울테니까,
이걸 자동으로 해주는 물리엔진 라이브러리를 갖다쓰기
캐논js는 사용하기 제일 쉬움, 기능들이 비슷하기때문에 다른거할때도 도움이 될 것

불투명한 색깔있는 컵은 mesh, 캐논js에서 만든 body의 오브젝트가 있따면
바디는 눈에 보이지 않음, 물리적으로 연산되고 연산이 적용되는 애,
우리가 원하는건 mesh를 공중에 놓고 떨어뜨리는 것, mesh에는 그런 기능이 없고
캐논js의 body를 이용해서 중력을 설정해주면 떨어짐
튕기거나, 넘어지거나 등등을 해줌

얘도 meshㅇ와 마찬가지로 위치, 회전값을 갖고 있는데 얘 위치를 mesh가 따라가게 만들면 됨
copy해서 그대로 따라가게끔
(결합이 된 상태로 같이 떨어지는 것처럼 보이게끔)
three.js에서 만든 mesh와 cannon.js에서 만든 body는 함께 따라가게 됨


----------------------------------------------
물리엔진 월드 생성

vscode에서 열기, 패키지 설치, three.js 설치

cannon.js 공식문서를 가보면 필요한걸 검색해보기

orbitControls 추가

three.js까지 설치를 해줬었는데, cannon.js는 외부라이브러리라서 따로 설치해주기
--> npm i cannon
오래돼서 업데이트가 안되어서 , es버전이 더 최신화되어 있어서
npm i cannon-es를 해주면 됨
three 코어 가져오는 식으로
import * as CANNON from 'cannon-es'로
--> CANNON. 으로 접근 가능

cannon에 월드를 만들어줘야함
new CANNON.World();

캐논 월드에 중력을 세팅해줘야함
--> 물리현상들이 자연스럽게 일어남
지구 중력, 달 중력이 다르듯이 중력가속도를 다르게 세팅해줄 수 있음
지구 중력가속도는 9.8, 지구랑 비슷하게 하려면 10정도
cannonWorld.gravity.set()
three.js에서 set할때 축 별로 세팅해줄 수 있었는데, 위에서 아래로 떨어지는거니까 y만 해주면 됨
--> set(0, -10, 0) : -로 해줘야 밑으로 떨어짐

큐브를 떨어뜨릴건데,
바닥을 추가해주기
--> 바닥도 역시 캐논에서 만들어줘야하지만 mesh가 일하는것
--> plane mesh를 깔아주기

const floorMesh = new ThREE.Mesh(
new THREE.PlaneGeometry(10, 10),
new THREE.MeshStandardMaterial(color : 'slategray'})
)

한번에 만들기, geometry, material를 따로 만들어줬지만 지금은 그냥 한번에 하기
(floor는 다른데서 쓸 일이 없을 거라)

scene.add(floorMesh)를 하면 plane이 세워져있음
--> floorMesh.ratation.x = (90도니까) Math.PI/2;
--> 이렇게 하면 안보임, 앞면이 바닥에 깔려서 뒷면은안보임, --> 앞면이 위로 오도록 앞에 -를 붙이기

이런 meshㄹ르 바닥 위에 놓을때는 mesh 높이의 절반 만큼을 y값을 올려줘야함
box의 높이가 1이니까, box의 y포지션을 0.5로 해줘야 바닥 위로 올라오게됨



--> cannon에서 세팅해주기
cannon에서도 바닥, box도 똑같이 필요함
(다음 시간에)