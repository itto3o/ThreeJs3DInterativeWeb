기본 지오메트리 파티클

파티클은 사전에서는 아주 작은 입자, three.js를 이용해서 별, 작은 입자들을 랜덤하게 뿌려주고, 흩어지게 할때 파티클을 사용함

그냥 mesh들과 다르게 효과를 얻을 수 있음

readme.txt  패키지 설치

서버를 구동하면 sphere mesh 하나가 있음

처음에는 기본 geometry형태에서 파티클 사용하기
meterial에서 wireframe : true로 하면 뼈대만 보이는데,
segment를 1, 32, 32로 해놔서 32로 쪼개진 것
확대 해보면 교차되는 점들이 있고, 이 형태에서 파티클을 사용한다는 것은 vertex마다 하나하나 파티클을 놓는다는 뜻
그냥 구 형태가 아니라 작은 입자들로 구성된 구처럼 보이게 됨

three.js에서 기본 제공 geometry를 만들어보기
material을 파티클을 사용할 수 있는 material로 바꿔주기, material = new THREE.PointsMaterial();
하면 그냥 하얘짐, mesh도 만들어줘야함

파티클은 일반 mesh가 아니라 다른 걸로 만들어줘야 함
points = new THREE.Points(geometry, material);

로 하면 점들이 모아져있는 느낌이 듦, 줌인하면 점들이 살아있음
크기가 너무 커서 좀 그런데
material에 size: 0.02로 해주면 파티클처럼 됨

가까이있는 쪽의 point는 크게보이고, 멀리있는 points들은 작게보여서 입체감이 드는데,
이 점들을 균일한 크기로 할 수도 있음
sizeAttenuation: false;로 하면
원근에 상관없이 균일한 ㅋ기로 할 수 있음
이런 속성은 material을 만들때 세팅해줘도 되고, 만들고 나서 넣어줘도됨
material.size = 0.02와 같이
Box로 해도 되고


-------------------------
랜덤 파티클

ex02.js

랜덤한 위치에 파티클을 흩뿌려주는 파티클

아까전에는 정해진 형태로 파티클을 뿌릴거라 원하는 형태의 geometry를 사용했는데, 이번에ㅡㄴ 필요하긴 한데 형태가 정해져있지 않음
--> BufferGeometry()를 사용
가진 형태가 있는게 아니라 먼저 geometry를 만들고 vertex를 우리가 만들어줌
인자는 아무것도 없음

파티클 개수는 count = 1000;
bufferGeometry에 적용할 point들의 위치를 설정해주기
Float32Array를 사용해서 position배열을 만들어주기

const positions = new Float32Array(count * 3); 길이는 count의 3배
x, y, z가 순서대로 들어가기 때문에 count 하나당 x, y, z가 필요함

랜덤값으로 쭉 채워보기
for (let i = 0; i < positions.length; i++)
positinos[i] = Math.random();

그냥 random()은 0~1사이 값인데, 그냥 하면 분포가 좀 작을테니까
-5~5 사이 값으로 하기 위해
-0.5를 빼면 -0.5~0.5사이가 되고 여기에 *10을 하면 -5 ~ 5가 됨

이렇게 positions을 만들고 geometry의 attribute의 position속성으로 등록해줘야 함
geometry.setAttribute('position', 배열을 바로 넣지 않고 새로운 객체를 넣어서 등록함
new THREE.BufferAttribute(positinos, 3)
'position'의 속성에 접근하는것

x, y, z점하나당 값을 3개를 쓸거니까 positinos배열을 이용해서 값을 3개를 쓰겠다는 의미

material을 만들어주기
points Material을 만들면 됨
new THREE.PointsMaterial(size: 0.03, color: 'plum');

mesh에 해당하는 points만들기
particles = new THREE.Points(geometry, material);
scene.add(particles);

로 하면
이제 우주공간처럼 느껴짐
줌아웃을 해보면 -5~5사이라서 직육면체처럼 보이게 됨
count도 10만개로 해도 괜찮은데, 하나도 안 버벅거림
gpu를 쓰기때문에 성능이 좋음


-----------------------------
파티클 이미지

ex03.js

파티클에 이미지를 사용하기
이미지를 사용해야하니까 load사용,
textureLoader를 사용

const textureLoader = new THREE.TExtureLoader();
textureLoader.laode(');

images폴더에 start.png를 사용
'/images/star.png')
--> 이후 웹팩을 config파일에서 바꿔주기
꼭 이렇게 해야하는건 아니라 '우리의' webpack 세팅에서는 이렇게 해야함

서버를 종료했다가 다시 구동
load한 후에 사용하기
const particleTexture = 에 load

material에서 map으로
map: particleTexutre
size를 0.3으로

별 이미지가 잘 들어갔는데 이미지가 투명하지 않음
--> 투명하게 만들어주는 세팅을 하면 됨
transparent: true,
alphaMap: particleTexture,
depthWrite: false;
로 하면 파티클 배경이 투명해짐

texture이미지를 로드해와서 map으로 설정해주기



-----------------------------
여러가지 색상의 파티클

ex04.js
여러가지 색의 파티클

색 자체를 세팅할 수 있음
material에서 color: 'lime'으로 넣엊루 수 있음
각 파티클마다 랜덤으로 색상을 알록달록하게 넣기

geometry.setAttribute('position'을 속성을 추가해주고 있었는데,
여기에 color setAttribute를 해줄 수 있음
여기에 color를 추가,
geometry.setAttribute('color', new THREE.BUfferAttribute(colors, 3);

colors 배열을만들기
colors = new Float32Array(count * 3);
colors[i] = Math.random();

컬러 값을 그냥 random값, 0~1사이의 값으로 넣어주면 알아서 랜덤하게 세팅이 됨
vertexColors: true
로 하면 알록달록하게 가능




-----------------------------------------------------
포인트 좌표에 메쉬 생성하기

ex05.js : Point 좌표에 Mesh 생성하기
geometry에 생성되는 point들의 좌표에 다른 mesh를 생성하기

point설정에 대한건 모듀 지우고,
sphere geometry를 만들어서 그 안에 있는 position attribute들의 vertex를 이용해서 각 좌표에 plane mesh를 생성하는 걸로

sphereGeometry(1, 8, 8);
각 정점의 좌표값들을 이용해서 이 자리에 plane mesh를 만들기

const positinoArray = sphereGeometry.attributes.positino.array;

이 포지션에 조립할 planeMesh 만들기
planeMesh = new THREE.Mesh(new THREE.PlaneGeometry(0.3, 0.3), new tHREe.MeshBasicMaterial({color:'red', side: THREE.DoubleSide})
doubleside로 하면 양면이 다 보임

여러개의 plane Mesh 생성
for(let i = 0; i < positinoARray.length; i+=3)

3개당 점 하나니까, i를 3개씩 증가
plane = planeMesh.clone();
plane.position.x = positionArray[i];
plane.position.y = positionArray[i+1];
z = i+2;

scene.add(plane);
--> mesh가 sphere형태로 세팅이 잘됨
부자연스러워보이는게, 모두 정면만 바로보고 있음
--> plane이 실제 구 표면에 맞춰서 기울어지게 하면 좋을듯?

카메라가 어떤 지점을 바라보게 할때 lookat을 사용했었음,
mesh도 가능(object 3d를 상속받았기 때문)
plane.lookAt(0, 0, 0); (가운데 바라보게끔)

점이 아니라 planemesh니까 각각 다른 texture도 입힐 수 있음
다음 시간에는 갤러리처럼 만들기


-------------------------------------
형태가 바뀌는 이미지 패널 만들기 1

ex06.js

주제 : 형태가 바뀌는 이미지 패널

현재 우리가 빨간 plane mesh를 position에 위치하는 중인데,
이 plane에 각각 사진을 넣고, 버튼 클릭하면 랜덤으로 촥 퍼졌다가, 다시 누르면 다시 구 모양으로 모이는 효과를 만들기

단순한 plane mesh를 모듈로 빼서 이미지 파일로 바꾸기
ImagePanel.js 

여러개의 plane mesh 생성하는 부분을 바꾸기
imagepanel instance를 생성하는 형태로

Imagepanel({
외부 이미지를 load해서 texture로만든다음에 적용해주려면
image panel자체가 texture loder를 쓸수있어야함
--> textureLoader를 만들어서 인자로 넣어주기

scene에다가 mesh를 해야하니까 scene도 필요,
material을 이미지 패널 안에서 특정 이미지가 매핑된 material을 쓸 것이라 필요 없고,
planeGeometry = new THREE.PlaenGeometry(0.3, 0.3);
image를 로드한댔으니까 imageSrc: images 폴더 안에 01, 02, 03 들을 사용할 것
데이터베이스에서 불러온 이미지를 뿌려준다던지로 바꿔도 됨
얘네는 랜덤으로 선택하게 할 것

imageSrc: `/images/0${Math.ceil(Math.random() * 5)}.jpg`
ceil로 올림연산을 하면 0~5가 나오게 됨(소수점 올림이 아니기 때문에)
위치 지정을 해줘야
planeMesh를 scene에 조립해야하니까 위치값은 positionArray에 x: positionArray[i] 이런 식으로



-----------------------------
형태가 바뀌는 이미지 패널 만들기 2

ImagePanel.js에서
export class ImagePanel {

생성자에서
constructor(info) {
const texture = info.textureLoader.load(info.imageSrc);

이 texture로 material
const material = new MeshBasicMaterial({
map: texture,
side : DoubleSide, : 양쪽면이 다 보이게

this.mesh = new MEsh(info.geometry, material)
const mesh가 아니라 this.mesh로 한 이유는 외부에서 사용할 예정이기 때문
this.mesh.position.set(info.x, info.y, info.z);
mesh가 바라보게,
this.mesh.lookAt(0, 0, 0);
(구 중심이 0, 0, 0에 있으니까 거기를 바라보면 원형이 되는거네 신깅..

info.scene.add(this.mesh);

--> 랜덤하게 다섯장의 이미지를 선택해서 생성되고 있음
doubleside로 해주니까 양면이 다 보임

