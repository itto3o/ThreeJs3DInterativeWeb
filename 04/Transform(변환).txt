위치 이동
04_transform 폴더를 vscode에서 드래그앤 드롭, readme에 있는 npm i 설치들 다 설치, three.js와 dat.gui도 모두 설치

ex01.js에는 기본 형만,

npm start로 서버를 구동하면 gui에 축 헬퍼로 축도 나타나있고, gui에 카메라 x,y,z가 있음

draw 함수에 mesh.position.y = 2; 로 하면 2로 올라감, 애니메이션을 주려면 값에 변화를 주면 됨

지금까지 position설정을 해줬는데, 이거 말고 다른 방법이 있음
mesh.position.set((x,y,z) 0,0,0);
취향 차이

position이라는 오브젝트는 무엇인가?
threeorg에서 vector3를 보면, vector3는 3차원 공간에서 점의 위치를 나타내는 객체임, x y z값을 갖고있음
--> 길이(0,0,0에서 오브젝트까지의 거리) mesh.position.length();
mesh.position.distanceTo(new THREE.Vector3(1, 2, 0)) : 새로운 벡터까지의 거리
--> (camera.position) 등을 인자로 넣을 수 있음


-----------------------------------------
크기 조정
ex02.js

mesh.scale(x,y,z or set 가능)
mesh.scale.x = 2; : x축 방향으로 2배만큼 늘어남
mesh.scale.y = 0.5; : 납작해짐

mesh.scale.set(1, 1, 1);


------------------------------------------
회전

03.js 만들고

mesh.rotation.x = (라디안 값, 2파이가 360도) THREE.mathUtils.degToRad(45);
mesh.rotation.x = Math.PI(파이가 180도) / 4; 니까 180/4 = 45
mesh.rotation.x = 1;(3.14가 1파이니까 얘는 60도 조금 안되겠네~)
mesh.rotation.x += delta; : x축을 기준으로 돌아감

회전은 주의해야할 게 있음
draw함수 바깥에서, 45도 돌린 후, 20도 x축을 기준으로 회전을 하면 조금 이상해짐,
우리가 원한건 y축으로 45도 한 후에 천장을 보려고 고개를 드는 느낌으로 생각했는데,
실제로는 y축으로 45도 돌렸다고 축이 이동하는 건 아니기 때문에 원래있던 x축으로 20도를 올려버려서 약간.. 비스듬히 됐다고 해야하나


이게 맞긴한데 이렇게되면 불편한 경우가 많이 생김,
--> 회전 축을 독립시켜서 바꿔줄 수 있음
mesh.rotation.reorder('YXZ');


reorder가 이해가 잘 안돼서 찾아봤는데,
여러 축을 회전 시킬때 무슨 축부터 회전시킬지 그 순서를 정해주는 함수래
그래서 Y축을 회전 후, X축을 회전 후, Z축을 회전하면 저렇게 되는듯


-----------------------------------
그룹만들기(Scene Graph)

04.js만들기

mesh가 두개 있다면, 그룹으로 묶을 수 있음
그룹의 위치를 옮기거나 회전을 하면 그룹 내의 mesh들이 모두 변화가 생김
--> 이게 안된다면 mesh 모두 다 하나하나 지정해줘야
그리고 각 mesh의 기준 축이 다르기 때문에 기준점에서 떨어진 곳에서 몇만큼을 또 더해줘야하는 그런 식이 다 다름

태양, 지구, 달의 자전, 공전 움직임을 그룹을 이용해서 쉽게 만들어보기
큐브 세개로

1번 그룹에 속한 1번 큐브, 1번 그룹 내에 또 작은 그룹으로 만든 2번 그룹 내의 2번 큐브(지구), 2번 안에 작은 그룹으로 만든 3번 큐브(달)

1번 그룹이 자체회전만 해도, 2번 그룹은 공전하게 됨, 2번 그룹이 한바퀴 자전한다면, 3번 그룹은 공전하게 됨
(1번 그룹을 엄청 크게 잡고, 1번 큐브가 자전하는게 아니라 1번 그룹 자체 모두가 자전한다고 생각하면, 1번 그룹 내에 있는 요소들은 1번 큐브(중심)을 기점으로 공전하는 것처럼 보일 것임)


mesh 추가하는 부분을 바꾸기
box1이 태양, 그룹 1에 넣어주기
const group1 = new THREE.Group();

box2 지구도 만들어 주기
box2 = box.clone(); 으로 하면 복제해서 같은 메쉬를 만드는 것
box2.scale.set(더 작게)
box2는 태양에 있는게 아니라 태양 옆에 있어야하니까 위치를 옮겨줘야 하는데, 이때 group2 자체를 옮겨줘야 한다.

그룹2에는 box2가 들어가고, 그룹1에는 box1과 그룹2가 들어가야 함,
scene.add(group1)만 해주면 됨

group3도 하면 됨
Group 대신에 Object3D로 해도됨
box2.clone()으로 box3만들고, x포지션을 0.5,
크기도 작게
group2에 group3을 추가하면 됨, group1에는 여전히 box1과 group2만 해주면 되는데, group2에 이미 group3이 들어가있기 때문

group1, 2, 3모두 rotation.y += delta해주면됨
--> 그룹으로 지정을 잘 해줬어서 rotation만 시켜줘도 알아서 이런 자전, 공전이 구현이 됨
구성과 위치를 잘 잡는게 중요함