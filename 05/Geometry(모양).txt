geometry를 box만 써봤는데 다양한 게 있어서 뭐가 있는지 몇가지 살펴보기

카메라 컨트롤 : 카메라를 조정할 수 있는 내장된 그것..
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'
					// 캔버스 객체
controls = new OrbitControls(camera, renderer.domElement);
--> 이걸로 웹에서 드래그하면 카메라를 회전시킬 수 있음, 휠로 줌인 줌아웃

meterial에서 wireframe:true로 하면 뼈대만 보여서 형태를 파악하기 수월함

계속 줌인을 하면 box안으로 카메라가 들어가게 되는데, 이때 mesh가 보이지 않게 됨
three.js는 앞면만 보여지게 하기 때문에 큐브 안으로 들어가버리면 큐브의 안쪽면은 안보임,
--> 보이게 하려면 meterial에서 side : THREE.DoubleSide로 하면 됨

geometry들을 공식사이트 가서 살펴보면,
설명이 잘되어있음, widthSegments : 도 옵션이 있는데 얼마나 side를 나눌지
기본적으로 three.js의 면은 삼각형으로 되어있는데, widthSegments를 2로 하면 이 삼각형이 2배로 늘어나서 더 작은 삼각형으로 이뤄지게 됨,
wireframe이 true가 아니라면 티는 안남
왜 segment를 조정할까?
--> vertax가 추가가 된거라서, 이 점들의 좌표를 바꾸면 geometry모양 자체가 바뀌어서 멋지게 만들 수 있음

circle의 segment를 줄이면 삼각형으로 만들어지는 도형이라 각진 원이 될 수 있음
thetaStart, length는 컴퍼스로 원을그린다고 생각했을때 시작지점과 얼만큼 그릴지를 결정함(이걸로 나팔모양을 만들 수 있음)

Cone은 뿔모양, segment를 늘리면 원뿔모양이 됨, openEnded를 true로 하면 밑면이 없어져 뚫림

cylinder는 다각기둥, 원기둥 가능, radus Top, bottom 조정 가능,

plane은 바닥같은거 깔때, (심플한 사각형느낌), 처음에는 서있어서 바닥으로 쓰려면 90도로 회전시켜줘야함

shape는 곡선을 직접 코드로 만들어서 bezierCurveTo로 가능, 가능은 하지만 잘 쓰진 않을듯

sphere는 구, 얘한테도 theta가 있는데, 이거는 위아래 조정, phi는 좌우조정

Torus는 도너츠


----------------------------------------------
Geometry 형태 조작하기 1

태양같은 물체를 만들기, 동그란데 겉표면이 꾸물꾸물거림 표면위의 vertex가 랜덤하게 바꿔짐, 애니메이션으로 효과를 줌
box를 만들때 세그먼트를 많이많이 올렸는데, 그만큼 vertax가 생긴 거고, 그 점들을 일정 범위 내에서 움직이도록 하면 위와같은 게 됨
html에 깔아준다거나, 바다로 표현한다거나, 느낌을 바꿀 수도 있게 응용가능

ex02.js
vertex는 점 하나하나를 말하는 것

sphere geometry 찾아서 그대로 쓰기

mesh에서 다 지우고 geometry = new THREE.SphereGeometry(5, 64, 64);
material은 orangered, doubleSIde

카메라가 너무 붙어있는 것 같아서
camera.position.z = 10;

표면이 부드럽지 않고 각이 졌었는데, 
--> meatrial에서 flatShading : true로 하면 각이지게 됨
(약간 폴리건 느낌)

vertex의 위치에 접근하는 방법ㅂ
mesh의 attributes의 position 속성은 정점 vertex를 담고있는 배열, float32 typed Array되어 있음.
javascript의 배열은 아무런 값도 다 넣을 수 있는데 얘는 float만 담는 대신에 성능이 뛰어남
attributes.position.array를 찍어보면 정점 개수의 세배만큼(x,y,z) -0, 5, 0, -0, 5, 0, 이런 식으로 되어있는데, 세개씩 끊어서 x y z로 알면 됨 이 세 개가 하나의 점을 표현


------------------------------------------
Geomoetry 형태 조작하기 2

위에서 구한 array로 조작하기
positionArray에 잇는 각 좌표들의 값을 변화시켜줌
--> for문으로 let i = 0; i < positionArray.length; i++
루프 한번 돌때마다 vertex 한 개의 x, y, z 좌표를 랜덤으로 조정
어느정도 범위 내의 랜덤(구 형태를 유지하기 위해)
i = x, i + 1 = y, i+2 = z니까
i를 1씩 하면 0 1 2일때 점 하나를 접근하니까 for 한번에 점 하나를 접근(x y z 셋 모두를 접근)해야함
--> for 한턴을 3의 배수일 때 실행하면 됨, i가 3일때, 6일때, 9일때 등등
--> i를 1씩 늘리지 않고 3씩 늘리기 i+= 3

positionArray[i] = positionArray[i] + Math.random() : 원래 위치에 랜덤값을 더하기(random()자체가 0~1 사이 값임)
--> x쪽으로 변화가 생겼는데, 더하기만 해서 한쪽으로 쏠림현상이 나타남, --> random()에서 -0.5하기
너무 삐죽삐죽해서 마음에 안든다면, random()값을 작게 해주면 됨, 0.2를 곱해주기

y, z도 모두 해주기

--> 초기위치 설정 완료, 이제 애니메이션을 넣으면 됨


--------------------------------
geometry 형태 조작하기 3

애니메이션은 draw함수 안에서 똑같이 xyz값을 갱신해주면 됨
그렇다고 위의 코드를 그대로 복붙하면 안됨, 위의 코드는 초기 값을 세팅하는 것이고, 여기에 변화하는 값을 더해줘야 애니메이션처럼 보일 것임
--> 삼각함수 sin활용(값 자체가 커졌다 줄어들었다함)
점점 커지거나 작아지거나만 하는게 아님
--> sin에 인자로 점점 늘어나는 값만 넣어도 진동가능

positionArray[i] += Math.sin(time)
delta말고 경과 시간을 쓰기, clock.getElapsedTime(); time자체가 경과 시간이 됨--> 계속 늘어나는값
--> 변화 하지 않음

--> 업데이트 하는 설정을 true로 해줘야함 geometry.attributes.position에서 해줘야함
--> 이렇게 했더니 화면 밖으로 날라갔다가 다시 돌아오는 중,
--> 값이 너무 크다
--> y값이 너무커서 그렇다.. --> sin의 호출 결과 자체니까 0.002를 곱해주기
너무 느린거 같다면? 각도를 더 빨리 늘어나게 해주면 되는데, 그러면 time에 * 3을 해주면 됨
다같이 똑같은 값이 더해지다보니까 랜덤하게 꾸물거리는게 아니라 전체적으로 이동을 하고 있음
--> 랜덤 값을 적용해주면 됨

------------------------------------------
geometry 형태 조작하기 4

어떻게 랜덤값을 적용할 것인가?
draw안에서 랜덤값을 만든다고 가정하면, draw함수는 1초마다 실행되는데 그때마다 random값을 구하기는 쉽지 않음
각각의 점들에 적용되는 값 자체가 랜덤으로 세팅되어 있다면
--> draw함수 호출 전에 미리 세팅
const randomArray로 각각 점들에 대해 매칭할 랜덤 값들을 만들기
positionArray에 대응되는 같은 범위의 random값
이 값을 time에 적용, time이 커지면 움직임이 빨라지고, time이 작아지면 움직임이 느려지니까
각 점들에 대해 time을 랜덤으로 주면 움직이는게 불규칙적임
--> time + randomArray[i] * 100
y, z도 동일하게 적용

너무 과한거같으면 0.002를 0.001로 바꿔주기

sphere가 아니라 plane에 해보면 다른 느낌, 색깔을 seagreen으로 하면 바다 느낌도 남
