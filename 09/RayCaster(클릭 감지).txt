RayCaster의 동작 원리

레이는 엑스레이할때 광선,

광선은 무한한 직선, mesh에 맞는데, 맞았다면 관통을해서 맞았다고 인지가 됨

--> mesh가 두개있다면 걔네 둘다관통함
--> ㅇ걸로 클릭을 감지할 수 있음

카메라에서 광선을 쏘고, mesh를 통과하면 클릭됐다고 판정을 함,
mesh들이 겹쳐있다면 둘다 선택이 됨
만약에 앞에 있는 것만 선택을 하고 싶다면 mesh 하나를 맞은 순간에 그만둘 수 있음

threejs 자체가 canvas판에서 그림으로 그려지는 거라 dom이런게 없음,
ray를 casting한다고 해서 레이캐스터라고 부름


----------------------------
준비 - Line으로 선 마들고 메쉬 배치하기

npm 으로 설치

특정 방향의 광선에 맞은 mesh 판별하기
임의의 위치에 임의의 길이로 광선을 쏘고 메쉬가 맞았는지 안맞았는지

광선을 시각적으로 그려야함
geometry로 광선을 표현한다는 뜻

실제 광선은아니고 raycaster에서 쏘는 광선은 보이지 않기 때문에 어디로 지ㅏㄴ는지 시각적으로 보이도록 raycaster에서 쏘는 광선이랑 똑같은 위치에 geometry로 광선을 그린다는 의미

lineMaterial = new THREE.LineBasicMaterial({color : 'yellow'});
선 모양 geometry 만들기
bufferGeometry라는ㄱ ㅔ있는데, 얘는 미리 모형이 만들어져있지 않고 임의로 포인트를 설정해서 그 포인트를 이어주면서 geometry형태를 만들어줄 수 있음
직선은 점과 점의 이은 선이니까 점 두개가 있어야함
const points = [];

점 두개 위치를 points에 넣기
points.push(new THREE.Vector3(0, 0, 100));
화면 바깥쪽이 되고, 화면 안쪽으로 하려면 -100

lineGeometry = new THREE.BufferGeometry().setFromPoints(points);
배열에 들어있는 점들의 위치를 기반으로 geomtry가 세팅이 됨
new THREE.Line(lineGeometry, lineMaterial);

평면상에서 아래로 가는 것처럼 보이지만
화면 저 깊숙한 곳으로 쏘는 것

카메라 위치를 바꾸면 올라가ㅡㄴ 것처럼 보임

boxGeometry도 하나 추가하기
torus geometry도 하나 더(도너츠 형태)
생성자에 반지르,ㅁ 두께, segment)


OrbitControls도 추가하기

--> box는 맞았고, torus는 안맞음(가운데가 뚫려있어서)
meshes 배열에 두개 넣기

얘네를움직이게 하면서 광선에 맞았는지 체크할 건데, 배열에 넣어놔야 체크하기가 쉬움



----------------------------------------
특성 광선을 지나는 메쉬 체크하기

raycaster를 만들어줘야함
THREE.Raycaster();

draw함수 안에서 const origin = 위치필요, 위에서 노란 선을 만들어놨으니까 (출발점)
노란 선과 위치를 똑같이 만들어주기

위치ㅡㄴ 0,0,100 / 0,0,-100
raycaster는 origin(시작 위치), 방향을 정해주면 됨
origin = new THREE.Vector3(0,0,100);
direction = new THREE.Vector3(0, 0, -1); (정교화된 방향, 1단위로 만든 방향)
방향이니까 제트로 -100방향이나 -1방향이나 똑같으니까 -1만 써주기
얼마나 더 가냐마냐니까

raycaster.set(origin, direction);
--> 광선 세팅 완료, 확인을 해봐야 하는데

콘솔에 맞았다는걸 출력
raycaster.intersectObjects(meshes);
--> 배열에 있는 메쉬들로 체크를함
--> 2라고 나오는데, 박스는 맞았는데, torus는 안맞는 중임
--> raycaster는 면을 기준으로 체크해서, 박스는 앞면 뒷면 둘다 맞아서 2라고 나옴
boxMesh.name = 'box';
torusMesh.name = torus


intersects.forEach(item => {
	console.log(item);
});
--> foreach문으로 돌면서 name을 출력
item에 object에 mesh가 들어있음, 그 안에 name에 있어서
item.object.name을 출력
--> box만 통과

item.object.material.color.set('red);
--> 맞았다면 빨개져라 --> 박스만 빨개짐

움직이는 상황에서도 잘 체크가 되는지확인

box, torus의 y포지션에 sin 적용
delta말고 elapestedTimeㅇ로
둘다 움직이게 함
--> 둘다 빨개짐

원래색으로 복구해주기
draw함수는 원래 반복이 되니까 그 함수 안에 원래 색으로 돌려주는 코드를 넣으면 됨

방향을 1이 아닌 -100으로 하면,
raycaster가 동작을안함
100으로 하고 싶다면, direction.normalize();를 통해정규화를 시켜줘야 함

전후를 비교해보기 위해 console에 출력해보면
direction.length()를 출력하면
100은 길이가 100이고, 정규화 후에는 길이가 1로 줄어듦

방향은 맞지만 정규화를 해서 바꿔주야 하는데
그냥 -1로 해주면 됨

정규화 자체를 잡기가 어려운 경우가 있을 때에만 정규화를 하면 됨
(x, y, z모두 다른 숫자가 들어가 있는 경우)


-------------------------
클릭한 메쉬 감지하기

ex02.js
클릭한 mesh 선택하기

클릭한 것만 빨개진다던지

선을 일단 지우기
draw함수 안에서도 raycaster관련 부분을 지우기

raycaster만든 부분 밑에 mouse라는 상수를 만들기
얘는 Vector2(); : 2는 2차원 위치, x, y만 보이게끔, 마우스는 평면이니까 2차원 좌표로

mouse 클릭하는 위치로 x, y좌표를 바꿔주기

click이벤트를 canvas에 바인딩 해줌
canvas.addEventListener('click', e => {console.log(e.clientX, e.clientY)});
--> 마우스 x, y좌표 (왼쪽 위가 0,0)

threejs는 센터가 0임
--> threejs에 맞게 좌표를 변환해줘야 함
mouse.x = e.clientX / canvas.clientWidth *2 - 1;
--> 숫자가 되게 작아짐, 0.xxx로 찍힘
아예 윗부분을 클릭하면(y를 크게 하면) -0.9가 나오고, 아래쪽을 클릭하면 0.9가 나옴
(x는 왼쪽이 -, 오른쪾이 + 그대로임)
--> y는 threejs에서는 위가 +인데, 현재는 위가 -가 나오니까
앞에 -를 붙여주면 됨

범위가 -1~1 씩으로 바뀜
클릭한 위치 / 창 크기 : 비율이 됨
*2를 한 것에 -1를 함 : 가운데에 0이 오게끔, (비율을 반으로 나누게끔)
비율이 0.7로 나왔따면, *2를 하면 1.4, -1하면 0.4고(+쪽), 비율이 0.3이면 *2 -1 하면 -0.4니까 -쪽

raycaster에서 쓰려면 좌표를 이렇게 바꿔줘야함 (정규화)
--> 이후 함수를 만들기
checkIntersects();로 만들기
여기서 raycaster.set으로 하면 되는데, 첫인자가 origin, 두번재가 방향
--> 마우스를 클릭한 거를 할거니까 set이 아니라 setFromCamera();'
카메라에서 보는 거니까, 어차피 클릭을 하는건 카메라가 바라보는 공간을 기준으로 클릭을 하는 거니까
카메라 시점에서 광선을 쐈을때를 생각해야함
방향에 camera를 그냥 넣어주면 됨
--> camera를 기준으로 mouse 클릭한 곳까지 광선을 쏴줌

for of문으로 쓰기 intersects안에 있는 item이라는 이름으로 원소마다 반복

둘이 겹쳐있을 때 클릭을 하면 같이 나옴
torus가 광선에 먼저 맞으니까 먼저 나옴
--> 일반적으로는 하나를 말함
그래서 for of문에서 break;를 걸엊두면 처음 것만 console 출력해주고 끝남

그냥 intersects자체가 광선에 맞은 순서대로 저장이 되기 때문에
그냥 console.log(intersects[0])을 하면 첫번째것만 나옴
--> 바깥에 아무것도 없는 데를 클릭하면 없으니까 error가 나옴
--> 값이 있을 때만 출력하게끔 해주면 됨

for of를 쓰면 좋은 점은 단순히 클릭한것만 할수있는게 아니라 일단 다 반복문을 돌면서 name에 따라 일괄적인 처리를 한다던지 하는 작업을 할 수 있음
처음 것만 판별한다던지 하면 연산 속도에서 차이가 거의 없음


해보니까 뭔가 범위가 한정되어서 클릭 감지가 잘 안되는 것 같다.
강의 코드와 비교해보니까
import { PreventDragClick } from './PreventDragClick';
이부분도 추가되어 있었따
(근데 이거는 ./에 preventDragClick이 없어서 오류가 나고,
mouse.y에 -를 안붙여놨었던 오류였다. 
(근데 -를 붙이니까 box를 선택하면 torus가 나온다...)
+ clientY인데 clientX로 해놨던 오류..


--------------------------
각도를 드래그해서돌려보면 torus에서 마우스를 놓으면 torus가 클릭됐따고 나옴
--> 문젝 ㅏ됨
뗄 때 그 위치가 체크가 됨
클릭을 할때마다 다른 액션을 취해야하는 그런거라면 치명적일 수 있음
--> 고쳐줘야

마우스 이벤트를 이용해서 마우스의 드래그가 일정 픽셀 일어나면 raycaster를 안하는 걸로 바꾸기

canvas.addEventListener('mousedown' e => {});
startX, Y를 위치를 넣어주고
mouseUp도 이벤트를 등록해서 100픽셀 이동하고 뗐다면 그 위치랑 startX Y와 차이를 보기
차이가 났다면 드래그, 안났다면 클릭

xGap = e.clientX - clickStartX
방향에 따라 -가 나올수도 있어서 절대값을 씌워주면 됨
--> Math.abs()에 넣기

만약에 xGap > 5(px)거나 y도 5보다 크다면 (대각선도 하고싶다면 피타고라스)
mouseMoved = true; --> click이 아닌걸로 판명
얘를 가지고 raycasting부분에서 함

checkIntersects 함수 앞부분에서 if(mouseMoved) return; 해주면 됨
--> 드래그하다가 torus부분에서 마우스를 떼도 안뜸

이제 문제는 움직였다가 원위치로 다시 돌아와서 마우스를 뗄 경우엔 여전히 뜸
--> 시간을 추가하면 됨
클릭을 시작한 시점에서 뗀 시점까지 특정 시간이 지났다면 클릭판정을 안하는 걸로
--> 그럼 그냥 이렇게 하면 되는게 아닌가..? 흠...

let clickStartTime;
 = Date.now(); (얘도 계속 증가하는 값)
mousedown시점, mouseup시점의 차이를 봐서 몇 초 이상이면 클릭한게 아니다.

0.5초 이내에 떼야함(timeGap > 500)

클릭이 됐다면 무언가 반응이 일어나도록 하기(빨개지도록)


-----------------------------
드래그 클릭 방지 모듈로 만들기

다른 데서도 공통으로 쓸 수있을 것 같음
--> 따로 모듈로 빼기

통째로 
PreventDragClick.js를 파서 class 생성, constructor 생성
처음에 이 클래스가 생기면 mouse이벤트가 생성되게

앞서 코딩한 부분을 생성자에 붙여넣기

mousemoved변수를 T/F를 판별해서 raycaster쪽에서 사용하는데, 그러면 외부에서 사용이 가능해야함
--> preventDragClick 클래스의 속성 인스턴스로 만들어주기

맨 위에 import { PreventDragClick } from './PreventDragClick'

const preventDragClick = new PreventDragClick();
이스턴스 객체의 속성으로 하기ㅗㄹ 했으니까 mouseMoved를 앞에 preventDragClick. 을 붙여주기(멤버 변수로 사용할 거라)

let으로 만드는게 아니라 this.으로 만들어주기
다른 애들은 내부에서만 사용할거라 let으로 만들어줘도 됨

this.를 붙이면 외부에서 접근도 가능
canvas가 뭔지 모름, canvas는 ex02.js에서 const canvas = document.querySelector('#three-canvas'); 였음
--> 범용성있게 만들면 좋으니까 호출할때 canvas를 넣어서 호출하기
--> 생성자안에 들어올테니까 elem으로 변해서 들어옴

--> 여기에 이벤트 바인딩